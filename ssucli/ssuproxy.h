/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c SsuProxy -p ssucli/ssuproxy.h:ssucli/ssuproxy.cpp dbus/org.nemo.ssu.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SSUPROXY_H_1383958410
#define SSUPROXY_H_1383958410

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.nemo.ssu
 */
class SsuProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.nemo.ssu"; }

public:
    SsuProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~SsuProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> addRepo(const QString &repo, const QString &url)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(repo) << QVariant::fromValue(url);
        return asyncCallWithArgumentList(QLatin1String("addRepo"), argumentList);
    }

    inline QDBusPendingReply<QString> deviceFamily()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deviceFamily"), argumentList);
    }

    inline QDBusPendingReply<int> deviceMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deviceMode"), argumentList);
    }

    inline QDBusPendingReply<QString> deviceModel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deviceModel"), argumentList);
    }

    inline QDBusPendingReply<QString> deviceUid()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deviceUid"), argumentList);
    }

    inline QDBusPendingReply<QString> deviceVariant()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deviceVariant"), argumentList);
    }

    inline QDBusPendingReply<QString> displayName(int type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("displayName"), argumentList);
    }

    inline QDBusPendingReply<bool> error()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("error"), argumentList);
    }

    inline QDBusPendingReply<QString> flavour()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("flavour"), argumentList);
    }

    inline QDBusPendingReply<bool> isRegistered()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("isRegistered"), argumentList);
    }

    inline QDBusPendingReply<QString> lastError()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("lastError"), argumentList);
    }

    inline QDBusPendingReply<> modifyRepo(int action, const QString &repo)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(action) << QVariant::fromValue(repo);
        return asyncCallWithArgumentList(QLatin1String("modifyRepo"), argumentList);
    }

    inline QDBusPendingReply<> quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("quit"), argumentList);
    }

    inline QDBusPendingReply<> registerDevice(const QString &username, const QString &password)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(username) << QVariant::fromValue(password);
        return asyncCallWithArgumentList(QLatin1String("registerDevice"), argumentList);
    }

    inline QDBusPendingReply<QString> release(bool rnd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(rnd);
        return asyncCallWithArgumentList(QLatin1String("release"), argumentList);
    }

    inline QDBusPendingReply<> setDeviceMode(int mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QLatin1String("setDeviceMode"), argumentList);
    }

    inline QDBusPendingReply<> setFlavour(const QString &flavour)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(flavour);
        return asyncCallWithArgumentList(QLatin1String("setFlavour"), argumentList);
    }

    inline QDBusPendingReply<> setRelease(const QString &release, bool rnd)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(release) << QVariant::fromValue(rnd);
        return asyncCallWithArgumentList(QLatin1String("setRelease"), argumentList);
    }

    inline QDBusPendingReply<> unregisterDevice()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("unregisterDevice"), argumentList);
    }

    inline QDBusPendingReply<> updateRepos()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("updateRepos"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void credentialsChanged();
    void done();
    void registrationStatusChanged();
};

namespace org {
  namespace nemo {
    typedef ::SsuProxy ssu;
  }
}
#endif
